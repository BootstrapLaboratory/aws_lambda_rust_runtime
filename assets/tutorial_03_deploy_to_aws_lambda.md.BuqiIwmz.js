import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.3FcD_4eP.js";const e="/aws_lambda_rust_runtime/assets/lambda_function_test_on_aws.Dvj9o3WR.png",l="/aws_lambda_rust_runtime/assets/api_gateway_integrations.B48Db1sJ.png",p="/aws_lambda_rust_runtime/assets/api_gateway_routes.wn2TKKJG.png",h="/aws_lambda_rust_runtime/assets/api_gateway_stages.51Y3u8iF.png",o="/aws_lambda_rust_runtime/assets/api_gateway_deploy.DN1UbMo_.png",E=JSON.parse('{"title":"3. Deploy to AWS Lambda","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/03_deploy_to_aws_lambda.md","filePath":"tutorial/03_deploy_to_aws_lambda.md","lastUpdated":1739370371000}'),r={name:"tutorial/03_deploy_to_aws_lambda.md"};function k(d,s,c,g,u,y){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_3-deploy-to-aws-lambda" tabindex="-1">3. Deploy to AWS Lambda <a class="header-anchor" href="#_3-deploy-to-aws-lambda" aria-label="Permalink to &quot;3. Deploy to AWS Lambda&quot;">​</a></h1><p>In Lesson 1/2 I created a fully working setup for comfortable development on my local machine. (No database yet – that comes in the next lesson.)</p><p>Let&#39;s deploy everything to AWS Lambda now!</p><hr><h2 id="off-topic" tabindex="-1">Off-topic <a class="header-anchor" href="#off-topic" aria-label="Permalink to &quot;Off-topic&quot;">​</a></h2><p>But first let me talk a little bit about my current setup.</p><p>As you noticed, I do not use the default Rust/Cargo bin/lib project entry points. Instead, I define my own custom main source files. This introduces a sort of duplication in the <code>Cargo.toml</code> files, which isn’t that bad; however, some may prefer to stick with Rust/Cargo defaults. So I will create an additional example function called <code>function_four</code> to illustrate an alternative approach.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app/functions/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_four</span></span></code></pre></div><p><code>app/functions/function_four/Cargo.toml</code></p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;function_four&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edition = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2021&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tokio = { workspace = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serde = { workspace = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># internal dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lambda_http_wrapper = { path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../libraries/lambda_http_wrapper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>app/functions/function_four/src/main.rs</code></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lambda_http_wrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lambda_http_wrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[tokio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.await</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>app/functions/function_four/src/types.rs</code></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//! This module defines the “API types” that your controllers use.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> serde</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Your application’s Request – you can add more fields as needed (e.g. headers, body).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// For simplicity we extract just the query parameters.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Your successful Response.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Your Error Response.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ErrorResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>app/functions/function_four/src/controller.rs</code></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// This is “business logic” controller</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">crate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ErrorResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // For example, get a &quot;name&quot; from the query string (defaulting to &quot;world&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Here you would call into your service layer, etc.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[Function_4] Hello {}, this is an AWS Lambda HTTP request using controller wrapper to avoid lots of boilerplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This approach has its benefits: next time you want to add another Lambda function to your project, you simply copy an existing function’s directory, change the package name in its <code>Cargo.toml</code>, add it to the top-level workspace <code>Cargo.toml</code>, and (optionally) modify its request/response types and controller logic. You can choose between using the default approach or my fully custom approach — the choice is yours.</p><h2 id="deploying-to-aws-lambda-using-cargo-lambda" tabindex="-1">Deploying to AWS Lambda using cargo-lambda <a class="header-anchor" href="#deploying-to-aws-lambda-using-cargo-lambda" aria-label="Permalink to &quot;Deploying to AWS Lambda using cargo-lambda&quot;">​</a></h2><p>In project root:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lambda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lambda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_one</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✅</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 🎉</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">🛠️</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiled</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">🔍</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arn:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arn:aws:lambda:eu-central-1:014498641106:function:function_one</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">🎭</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lambda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_three</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✅</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 🎉</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">🛠️</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiled</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">🔍</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arn:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arn:aws:lambda:eu-central-1:014498641106:function:function_three</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">🎭</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p>Perfect. The deployment tool takes care of building and uploading my functions to AWS Lambda.</p><p>Function cold startup time is about 35–50ms, while execution durations are around 1ms (typically billed as 2ms when rounded up). I can see the functions in the AWS Console and test them using the <code>apigateway-http-api-proxy</code> template. Note that when testing a Lambda function in the AWS Console, you must supply all the required internal details. For example, the API Gateway proxy template supplies a base64‑encoded body (which you can decode with <a href="https://www.base64encode.org/" target="_blank" rel="noreferrer">base64encode.org</a>):</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eyJuYW1lIjoiZnVuY3Rpb25fb25lIn0=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><p>Testing in the AWS Console yields a response like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;statusCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;headers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;content-type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;multiValueHeaders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">message</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[Function_1] Hello function_one, this is an AWS Lambda HTTP request using controller wrapper to avoid lots of boilerplate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;isBase64Encoded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;cookies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This is also how it appears on the AWS Lambda Dashboard:</p><p><img src="`+e+`" alt="img"></p><h2 id="configure-aws-locally" tabindex="-1">Configure AWS locally <a class="header-anchor" href="#configure-aws-locally" aria-label="Permalink to &quot;Configure AWS locally&quot;">​</a></h2><p>For me, deploying to AWS works right away because I’ve used the AWS CLI many times and it’s already configured on my machine. If you’re setting this up for the first time and you don’t have the AWS CLI installed or configured yet, follow these steps:</p><h3 id="_1-install-aws-cli" tabindex="-1">1. Install AWS CLI <a class="header-anchor" href="#_1-install-aws-cli" aria-label="Permalink to &quot;1. Install AWS CLI&quot;">​</a></h3><p><strong>macOS:</strong></p><p>If you have Homebrew installed, run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> awscli</span></span></code></pre></div><p><strong>Windows:</strong></p><p>Download the AWS CLI MSI installer from the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html" target="_blank" rel="noreferrer">AWS CLI Installation page</a> and run the installer.</p><p><strong>Linux:</strong></p><p>Download and install using the following commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;awscliv2.zip&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> awscliv2.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./aws/install</span></span></code></pre></div><p>After installation, verify the installation by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aws</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div><p>You should see output similar to <code>aws-cli/2.x.x Python/3.x.x Linux/...</code>.</p><h3 id="_2-obtain-your-aws-access-keys" tabindex="-1">2. Obtain Your AWS Access Keys <a class="header-anchor" href="#_2-obtain-your-aws-access-keys" aria-label="Permalink to &quot;2. Obtain Your AWS Access Keys&quot;">​</a></h3><ol><li><p>Log In to the AWS Management Console: Go to <strong>AWS Console</strong> and log in.</p></li><li><p>Navigate to IAM: In the <strong>AWS Console</strong>, search for and open <strong>IAM</strong> (Identity and Access Management).</p></li><li><p>Create a New User (if needed):</p><ul><li>In the <strong>IAM</strong> dashboard, click on Users in the sidebar.</li><li>Click <strong>Add user</strong>.</li><li>Enter a <code>username</code> (e.g., aws-cli-user).</li><li>Select <code>Programmatic access</code> as the access type.</li><li>Click <strong>Next: Permissions</strong>.</li><li>Attach a policy such as <code>AdministratorAccess</code> for testing (for production, consider a policy with only the required permissions).</li><li>Click through to create the user.</li></ul></li><li><p>Save Your Access Keys: After the user is created, you’ll see an <code>Access key ID</code> and a <code>Secret access key</code>. Save these credentials securely (you won’t be able to see the secret access key again).</p></li></ol><h3 id="_3-configure-aws-cli" tabindex="-1">3. Configure AWS CLI <a class="header-anchor" href="#_3-configure-aws-cli" aria-label="Permalink to &quot;3. Configure AWS CLI&quot;">​</a></h3><p>Open your terminal and run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configure</span></span></code></pre></div><p>When prompted, enter the following:</p><ul><li><code>AWS Access Key ID</code>: (your access key ID)</li><li><code>AWS Secret Access Key</code>: (your secret access key)</li><li><code>Default region name</code>: (e.g., eu-central-1 or the region you use)</li><li><code>Default output format</code>: (e.g., <code>json</code>)</li></ul><p>These settings are saved in <code>~/.aws/credentials</code> and <code>~/.aws/config</code>.</p><h3 id="_4-test-your-configuration" tabindex="-1">4. Test Your Configuration <a class="header-anchor" href="#_4-test-your-configuration" aria-label="Permalink to &quot;4. Test Your Configuration&quot;">​</a></h3><p>Run a simple command to confirm that your AWS CLI is properly configured:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-caller-identity</span></span></code></pre></div><p>You should receive a JSON output with details about your AWS account.</p><p>Note: Keep your AWS credentials secure and never expose them publicly or commit them to version control.</p><p>Now you’re ready to deploy your Lambda functions using <code>cargo lambda deploy...</code> — the AWS CLI will supply the necessary credentials for authentication.</p><h2 id="configure-aws-api-gateway-to-expose-functions-to-web" tabindex="-1">Configure AWS API Gateway to expose functions to web <a class="header-anchor" href="#configure-aws-api-gateway-to-expose-functions-to-web" aria-label="Permalink to &quot;Configure AWS API Gateway to expose functions to web&quot;">​</a></h2><p>To use my AWS Lambda functions as HTTP handlers in web applications, I need to expose them via <strong>AWS API Gateway</strong>. This allows my Lambda functions to be accessed via a standard HTTP(S) URL. Below, I&#39;ll walk you through setting up <strong>API Gateway</strong>.</p><h3 id="_1-check-lambda-functions" tabindex="-1">1. Check Lambda Functions <a class="header-anchor" href="#_1-check-lambda-functions" aria-label="Permalink to &quot;1. Check Lambda Functions&quot;">​</a></h3><p>Ensure your functions are deployed and correctly configured as HTTP handlers.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lambda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list-functions</span></span></code></pre></div><p>Find function’s <strong>ARN</strong> (Amazon Resource Name) from the output.</p><h3 id="_2-create-an-http-api-in-aws-api-gateway" tabindex="-1">2. Create an HTTP API in AWS API Gateway <a class="header-anchor" href="#_2-create-an-http-api-in-aws-api-gateway" aria-label="Permalink to &quot;2. Create an HTTP API in AWS API Gateway&quot;">​</a></h3><p><img src="`+l+'" alt="Create API"></p><p><img src="'+p+'" alt="Routes"></p><p><img src="'+h+'" alt="Stages"></p><p><img src="'+o+`" alt="Deploy"></p><ol><li><p>Go to <strong>API Gateway</strong> in <strong>AWS Console</strong>:</p><ul><li>Click <strong>Create API</strong> → Select <strong>HTTP API</strong> and click <strong>Build</strong>.</li></ul></li><li><p>Configure API Gateway:</p><ul><li>Integration type: Lambda function.</li><li>Lambda function: Choose your function (e.g., function_one).</li><li>Region: Ensure it&#39;s the same as your Lambda function.</li><li>Click <strong>&quot;Next&quot;</strong> until you reach <strong>&quot;Review and Create&quot;</strong></li><li>Click <strong>&quot;Create API&quot;</strong>.</li></ul></li><li><p>Get the API Gateway URL:</p><ul><li>Once your API is created, go to Stages → Click on &quot;Default stage&quot;.</li><li>Copy the Invoke URL, which looks like:</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://your-api-id.execute-api.your-region.amazonaws.com/</span></span></code></pre></div></li></ol><h3 id="_3-set-up-routes-for-each-lambda-function" tabindex="-1">3. Set Up Routes for Each Lambda Function <a class="header-anchor" href="#_3-set-up-routes-for-each-lambda-function" aria-label="Permalink to &quot;3. Set Up Routes for Each Lambda Function&quot;">​</a></h3><p>By default, API Gateway does not expose your function at a specific path. You must define routes manually.</p><ol><li>In your API Gateway: <ul><li>Click on <strong>Routes → Create a route</strong>.</li><li>Choose the method (<code>GET</code>, <code>POST</code>, etc.).</li><li>Set the path (e.g., <code>/function_one</code>).</li><li>Click <strong>Create Route</strong>.</li></ul></li><li>Go to &quot;Integrations&quot; → Click Create Integration: <ul><li>Choose <strong>&quot;Lambda function&quot;</strong>.</li><li>Select the corresponding Lambda function.</li><li>Click <strong>Create Integration</strong>.</li></ul></li><li>Repeat for each function (e.g., <code>/function_three</code>, <code>/function_three</code>).</li></ol><h3 id="_4-enable-cors-if-calling-from-a-web-app" tabindex="-1">4. Enable CORS (If Calling from a Web App) <a class="header-anchor" href="#_4-enable-cors-if-calling-from-a-web-app" aria-label="Permalink to &quot;4. Enable CORS (If Calling from a Web App)&quot;">​</a></h3><p>If client web app runs in a browser and is hosted on a different domain, I must enable <strong>CORS</strong> (Cross-Origin Resource Sharing).</p><ul><li>In <strong>API Gateway</strong>, go to <strong>Routes</strong> → Select route (<code>/function_one</code>).</li><li>Click <strong>&quot;Enable CORS&quot;</strong> and configure: <ul><li>Allowed methods: <code>GET, POST, OPTIONS</code></li><li>Allowed origins: <code>*</code> (or specify your domain)</li><li>Allowed headers: <code>Content-Type</code></li></ul></li><li>Click <strong>&quot;Deploy Changes&quot;</strong>.</li></ul><h3 id="_5-deploy-and-test-the-api" tabindex="-1">5. Deploy and Test the API <a class="header-anchor" href="#_5-deploy-and-test-the-api" aria-label="Permalink to &quot;5. Deploy and Test the API&quot;">​</a></h3><ul><li>Click on <strong>&quot;Deploy API&quot;</strong> and select the stage (<code>default</code>).</li><li>Get the <strong>Invoke URL</strong>, e.g.:</li></ul><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://your-api-id.execute-api.your-region.amazonaws.com/function_one</span></span></code></pre></div><p>Test it with cURL:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://etmse4i5b5.execute-api.eu-central-1.amazonaws.com/function_one</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;error&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Expected JSON body, got empty body&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://etmse4i5b5.execute-api.eu-central-1.amazonaws.com/function_one</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;name&quot;: &quot;lambda&quot;}&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;message&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;[Function_1] Hello lambda, this is an AWS Lambda HTTP request using controller wrapper to avoid lots of boilerplate&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://etmse4i5b5.execute-api.eu-central-1.amazonaws.com/function_three</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;message&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;[Function_3] Hello function_three, this is an AWS Lambda HTTP request using controller wrapper to avoid lots of boilerplate&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">}</span></span></code></pre></div><p>Now I have my <strong>AWS Lambda</strong> functions written in <strong>Rust</strong> language deployed to <strong>AWS Lambda</strong> and served by <strong>API Gateway</strong> in web.</p><h2 id="automating-the-deployment-process" tabindex="-1">Automating the Deployment Process <a class="header-anchor" href="#automating-the-deployment-process" aria-label="Permalink to &quot;Automating the Deployment Process&quot;">​</a></h2><p>In this lesson, I manually set up AWS API Gateway to expose my Lambda functions as REST API endpoints. While this approach works, I do not want to repeat these steps every time I update my functions or add new ones. In real-world applications, I want to automate this entire process using a <strong>CI/CD pipeline</strong>.</p><p>A proper CI/CD setup will:</p><ul><li>Automatically build and deploy my Lambda functions.</li><li>Provision API Gateway routes dynamically.</li><li>Configure permissions, CORS, and environment variables automatically.</li><li>Ensure every deployment is seamless and reproducible.</li></ul><p>Setting up <strong>Infrastructure as Code (IaC)</strong> using <strong>AWS CloudFormation</strong>, <strong>Terraform</strong>, or <strong>Serverless Framework</strong> will allow me to define my entire API setup declaratively. This means I will no longer need to manually configure API Gateway or IAM permissions—I will describe everything in code and let my deployment pipeline handle the rest.</p><p>I will cover this automation in a separate lesson, where I will integrate my AWS Lambda deployment into a CI/CD workflow.</p><p>For now, in its current state, this project is ready for <strong>simple try-out or proof-of-concept (PoC) projects</strong>, where I do not need a complex setup and can manually configure API Gateway as needed.</p><p><a href="https://github.com/BootstrapLaboratory/aws_lambda_rust_runtime/tree/lesson-3" target="_blank" rel="noreferrer">Browse the code at Lesson 3 checkpoint</a></p>`,87)]))}const C=i(r,[["render",k]]);export{E as __pageData,C as default};
