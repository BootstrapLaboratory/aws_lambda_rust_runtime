import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.BmLMQRXF.js";const c=JSON.parse('{"title":"1. Initial setup","description":"","frontmatter":{},"headers":[],"relativePath":"01_initial_setup.md","filePath":"01_initial_setup.md","lastUpdated":1739153840000}'),l={name:"01_initial_setup.md"};function e(p,s,h,k,o,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_1-initial-setup" tabindex="-1">1. Initial setup <a class="header-anchor" href="#_1-initial-setup" aria-label="Permalink to &quot;1. Initial setup&quot;">​</a></h1><p>Each of our Lambda function will be stored in separate Cargo module. They may have very different dependencies, and we don&#39;t want all of our functions to be bundled with dependencies they don&#39;t require. Yes, Cargo actually supports to have multiply binaries in one module and have different dependencies for eac of them, but configuring and managing it is quite difficult. Going with multiply modules is much more straightforward and have lots of benefits later on.</p><p>Then I&#39;m going with following initial setup:</p><p>I will use:</p><ul><li><strong>Cargo workspaces</strong> – to manage multiple Lambda functions within a single repository.</li><li><strong>cargo-lambda</strong> – the official AWS tool for building and locally testing Rust Lambda functions.</li><li><strong>AWS Lambda Rust Runtime</strong> – the official runtime for Rust Lambda.</li><li><strong>cargo-watch</strong> (or the built-in <strong>cargo-lambda</strong> watch) – to automatically rebuild on code changes and simplify local debugging.</li><li><strong>DynamoDB Local</strong> (if needed) – to work with DynamoDB without connecting to the cloud.</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rust_cargo_lambda</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rust_cargo_lambda/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating shared library</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> common_lib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and lets make three lambda functions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_one</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_two</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_three</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span></span></code></pre></div><p>When I did it myself, I forgot to initialize git repository in the beginning, and <code>cargo new ...</code> did it in each of functions subdirectories. If its happening for you, then remove <code>.git</code> in all of subdirectories.</p><p><code>Cargo.toml</code>:</p><div class="language-tolm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tolm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[workspace]</span></span>
<span class="line"><span>members = [</span></span>
<span class="line"><span>    &quot;function_one&quot;,</span></span>
<span class="line"><span>    &quot;function_two&quot;,</span></span>
<span class="line"><span>    &quot;function_three&quot;,</span></span>
<span class="line"><span>    &quot;common_lib&quot;,     # you probably want to have more then one library (&quot;common&quot; - is bad naming, use something more descriptive. here I use it just as example)</span></span>
<span class="line"><span>]</span></span></code></pre></div><p><code>rust-toolchain.toml</code> (Optional):</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stable&quot;</span></span></code></pre></div><p>This is how it should look for you:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rust_cargo_lambda/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                # Workspace</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rust-toolchain</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       # Rust version (Optional, but can be useful)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.gitignore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">common-lib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/               # library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── src/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── lib</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">function-one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── src/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">function-two</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── src/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">function-three</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    └── src/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        └── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span></code></pre></div><p>Remove all unnecessary files if they exist. I had <code>.gitignore</code> file in each submodule. Let&#39;s create one in root of project:</p><p><code>.gitignore</code>:</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>target</span></span>
<span class="line"><span>**/*.rs.bk</span></span>
<span class="line"><span>**/*.log</span></span>
<span class="line"><span>Cargo.lock</span></span></code></pre></div><p>Each function has &quot;main.rs&quot; as entry point. It is default in Cargo. I do not like this. Later on it will be hard to navigate between them to edit, when all functions are named &quot;main.rs&quot;. Let&#39;s rename them.</p><p>Open each of the submodule&#39;s <code>Cargo.toml</code> and add there these lines:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;function_one&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/function_one.rs&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span></code></pre></div><p>For library it will be this (<code>common_lib/Cargo.toml</code>):</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common_lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/common_lib.rs&quot;</span></span></code></pre></div><p>And the last thing that I do not like in my Hello world project, which was introduces already by me initially. Structure of directories is not perfect already. Everything is mixed and its hard to guess by structure where is what. Especially when there are <code>target</code>, <code>doc</code>, and <code>.vscode</code> directories, and you may add more here. Even for such a small project it is already a problem. So I will make refactoring on early stage not to have this problem anymore.</p><p>I create <code>app</code> directory and inside it two more directories: <code>functions</code>, <code>libraries</code>.</p><p>I think you got an idea. Choose your own names, if you don&#39;t like my ones. More important is that now it has quite straight representative structure:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── function_one</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   │   └── function_one</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── function_three</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   │   └── function_three</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   └── function_two</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │       ├── src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │       │   └── function_two</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │       └── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── libraries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── common_lib</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           ├── src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           │   └── common_lib</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.rs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           └── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── doc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── tutorial</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.gitignore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.lock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── Cargo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rust-toolchain</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.toml</span></span></code></pre></div><p>Modify workspace <code>Cargo.toml</code> accordingly:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">workspace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">members = [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # functions</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;app/functions/function_one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;app/functions/function_two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;app/functions/function_three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # libraries</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;app/libraries/common_lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>You can already notice, that project can be build with <code>cargo build</code> in root workspace project and in each separate submodule. You can even run it: <code>cargo run --bin function_one</code>.</p><p>During build I get this warning:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> virtual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> workspace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defaulting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = &quot;1&quot;\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> despite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> one</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> workspace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> members</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> being</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edition</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2021</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> implies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = &quot;2&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">note:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resolver,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">workspace.resolver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = &quot;1&quot;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> in the workspace root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s manifest</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">note: to use the edition 2021 resolver, specify \`workspace.resolver = &quot;2&quot;\` in the workspace root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s manifest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">note:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> more</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> details</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> see</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions</span></span></code></pre></div><p>Let&#39;s fix it. <code>Cargo.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">workspace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resolver = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span></code></pre></div><p>Now it builds with no warnings and have pretty structure. I think that&#39;s enough for the first lesson.</p><p><a href="https://github.com/BootstrapLaboratory/aws_lambda_rust_runtime/tree/lesson-1" target="_blank" rel="noreferrer">Browse the code at Lesson 1 checkpoint</a></p>`,34)]))}const g=i(l,[["render",e]]);export{c as __pageData,g as default};
